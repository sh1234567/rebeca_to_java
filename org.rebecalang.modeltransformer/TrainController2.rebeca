reactiveclass BridgeController(5) {
	knownrebecs {
		Train train1;
		Train train2;
	}

	statevars {
		boolean isWaiting1;
		boolean isWaiting2;
		boolean signal1;
		boolean signal2;
		boolean var = true;
		
	}


	BridgeController() {
		signal1 = false;	/* red */
		signal2 = false;	/* red */
		isWaiting1 = false;
		isWaiting2 = false;
	}
	
	msgsrv Arrive() {
		if (var == true){
			if (signal2 == false) {
				signal1 = true;	/* green */
				train1.YouMayPass();
			}
			else {
				isWaiting1 = true;
			}
		}
		else {
			if (signal1 == false){
				signal2 = true;	/* green */
				train2.YouMayPass();
			}
			else{
				isWaiting2 = true;
			}
		}
	}
	
	msgsrv Leave() {
		if (var == true) {
			signal1 = false;	/* red */
			if (isWaiting2){
				signal2 = true;
				train2.YouMayPass();
				isWaiting2 = false;
			}
		} else {
			signal2 = false;	/* red */
			if (isWaiting1) {
				signal1 = true;
				train1.YouMayPass();
				isWaiting1 = false;
			}
		}
	}
}

reactiveclass Train(3) {
	knownrebecs {
		BridgeController theController;
	}

	statevars {
		boolean onTheBridge;
	}

	Train() {
		onTheBridge = false;
		self.Passed();
	}

	msgsrv YouMayPass() {
		onTheBridge = true;
		self.Passed();
	}
	
	msgsrv Passed() {
		onTheBridge = false;
		theController.Leave();
		self.ReachBridge();
	}

	msgsrv ReachBridge() {
		theController.Arrive();
	}
}


main {
	Train train1(theController):();
	Train train2(theController):();
	BridgeController theController(train1, train2):();
}